{
  "use v3s dialog": {
    "prefix": "v3s-usedialog",
    "body": [
      "// <el-button @click=\"showDialog\">点击弹窗</el-button>",
      "// <!-- 弹窗-用途 -->",
      "// <Dialog v-model=\"dialogVisible\" title=\"自定义标题\" width=\"700px\" />",
      "",
      "import { ref } from \"vue\";",
      "import Dialog from \"./dialog.vue\";",
      "",
      "/** 弹窗 START **/",
      "const dialogVisible = ref(false); // 弹窗显示/隐藏",
      "",
      "// 显示弹窗",
      "const showDialog = () => {",
      "  dialogVisible.value = true;",
      "};",
      "/** 弹窗 END **/",
      ""
    ],
    "description": "use v3s dialog"
  },
  "use v3s el-form": {
    "prefix": "v3s-useelform",
    "body": [
      "// <el-form ref=\"ruleFormRef\" :model=\"ruleForm\" :rules=\"rules\" label-width=\"auto\" status-icon>",
      "//   <el-form-item label=\"名称\" prop=\"name\">",
      "//     <el-input v-model=\"ruleForm.name\" placeholder=\"请输入\" />",
      "//   </el-form-item>",
      "// </el-form>",
      "// ",
      "// <div class=\"flex items-center justify-end mt-6\">",
      "//   <el-button type=\"primary\" @click=\"submitForm\">确认</el-button>",
      "//   <el-button @click=\"resetForm\">重置</el-button>",
      "//   <el-button @click=\"closed\">取消</el-button>",
      "// </div>",
      "",
      "import { reactive, ref } from \"vue\";",
      "",
      "/** el-form START **/",
      "const ruleFormRef = ref();",
      "const ruleForm = reactive({",
      "  name: \"\",",
      "});",
      "const rules = reactive({",
      "  name: [{ required: true, message: \"请输入名称\", trigger: \"blur\" }],",
      "});",
      "",
      "// 提交表单",
      "const submitForm = async () => {",
      "  if (!ruleFormRef.value) return;",
      "  await ruleFormRef.value.validate((valid, fields) => {",
      "    if (valid) {",
      "      // do something",
      "    }",
      "  });",
      "};",
      "",
      "// resetForm(ruleFormRef.value);",
      "// 重置表单",
      "const resetForm = () => {",
      "  if (!ruleFormRef.value) return;",
      "  ruleFormRef.value.resetFields();",
      "};",
      "/** el-form END **/",
      ""
    ],
    "description": "use v3s dialog"
  },
  "code 200": {
    "prefix": ["v3s-code200"],
    "body": ["if (res.code == 200) {}"]
  },
  "params object": {
    "prefix": ["v3s-params"],
    "body": ["const params = {}"]
  },
  "api": {
    "prefix": ["v3s-api"],
    "body": [
      "const params = {}",
      "${1:api}(params)",
      "  .then(res => {",
      "    if (res.code == 200) {",
      "      $2",
      "    }",
      "  })",
      "  .catch(() => {})",
      "  .finally(() => {});"
    ]
  },
  "api curd": {
    "prefix": ["v3s-api-curd"],
    "body": [
      "import request from \"@/utils/request\";",
      "const baseURl = import.meta.env.VITE_SYSTEM_BASE_URL;",
      "",
      "export const get${1/(.*)/${1:/capitalize}/} = params => {",
      "\treturn request({",
      "\t\turl: `\\${baseURl}/${1:api}`,",
      "\t\tmethod: \"get\",",
      "\t\tparams,",
      "\t});",
      "};",
      "",
      "export const post${1/(.*)/${1:/capitalize}/} = data => {",
      "\treturn request({",
      "\t\turl: `\\${baseURl}/${1:api}`,",
      "\t\tmethod: \"post\",",
      "\t\tdata,",
      "\t});",
      "};",
      "",
      "export const put${1/(.*)/${1:/capitalize}/} = (id, data) => {",
      "\treturn request({",
      "\t\turl: `\\${baseURl}/${1:api}/\\${id}`,",
      "\t\tmethod: \"put\",",
      "\t\tdata,",
      "\t});",
      "};",
      "",
      "export const delete${1/(.*)/${1:/capitalize}/} = id => {",
      "\treturn request({",
      "\t\turl: `\\${baseURl}/${1:api}/\\${id}`,",
      "\t\tmethod: \"delete\",",
      "\t});",
      "};",
      ""
    ]
  },
  "use pinia in vue3": {
    "prefix": ["v3s-usepinia"],
    "body": [
      "import { use${1/(.*)/${1:/capitalize}/}Store } from \"@/stores/${1:demo}.js\";",
      "import { storeToRefs } from \"pinia\";",
      "",
      "const ${1:demo}Store = use${1/(.*)/${1:/capitalize}/}Store();",
      "const { ${2:variable} } = storeToRefs(${1:demo}Store);",
      "",
      "// ${1:demo}Store.\\$patch(state => {",
      "//   state.${2:variable} = ${3:false};",
      "// });",
      ""
    ]
  },
  "use pinia patch in vue3": {
    "prefix": ["v3s-usepinia-patch"],
    "body": ["${1:demoStore}.\\$patch(state => {", "\tstate.${2:variable} = ${3:false};", "});"]
  },
  "create pinia store": {
    "prefix": ["v3s-pinia"],
    "body": [
      "import { defineStore } from \"pinia\";",
      "",
      "export const use${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}Store = defineStore(\"${TM_FILENAME_BASE}\", {",
      "  state: () => ({",
      "    counter: 10,",
      "  }),",
      "  getters: {",
      "    doubleCount: state => state.counter * 2,",
      "  },",
      "  actions: {",
      "    increment(data) {",
      "      this.counter = data;",
      "    },",
      "  },",
      "  persist: true, // localstorage yes or no",
      "});",
      ""
    ]
  },
  "vue3 loading": {
    "prefix": ["v3s-loading"],
    "body": ["const loading = ref(false);", "// loading.value = true;", "// loading.value = false;"]
  },
  "const fn": {
    "prefix": ["v3s-cfn"],
    "body": ["// ${1:用途}", "const ${2:fn} = ($3) => {$4};"]
  },
  "const fn debounce": {
    "prefix": ["v3s-cfn-debounce"],
    "body": ["// ${1:用途}", "const ${2:fn} = debounce(($3) => {$4}, 200);"]
  },
  "vue3 router": {
    "prefix": ["v3s-router"],
    "body": [
      "import { useRouter } from \"vue-router\";",
      "",
      "const router = useRouter();",
      "",
      "router.push({",
      "  path: \"/\",",
      "});"
    ],
    "description": "import useRouter and create router"
  },
  "vue3 route": {
    "prefix": ["v3s-route"],
    "body": ["import { useRoute } from \"vue-router\";", "", "const route = useRoute();"],
    "description": "import useRoute and create route"
  },
  "import api func": {
    "prefix": ["v3s-imdapi"],
    "body": ["import { $2 } from \"@/api/${1:api}.js\";"],
    "description": "import api func"
  },
  "import utils common": {
    "prefix": ["v3s-imdutils"],
    "body": ["import { $2 } from \"@/utils/${1:index}.js\";"],
    "description": "import utils"
  },
  "import hooks": {
    "prefix": ["v3s-imdhooks"],
    "body": [
      "import { use${1/(.*)/${1:/capitalize}/} } from \"@/hooks/use${1/(.*)/${1:/capitalize}/}.js\";",
      "const { $2 } = use${1/(.*)/${1:/capitalize}/}();"
    ],
    "description": "import hooks"
  },
  "create props": {
    "prefix": ["v3s-defineProps"],
    "body": [
      "const props = defineProps({",
      "  ${1:width}: {",
      "    type: ${2|String,Number,[Number\\, String],Object,Array,Function,Boolean|},",
      "    default: \"${3:100%}\"",
      "  },",
      "});"
    ],
    "description": "create defineProps code"
  },
  "create emit": {
    "prefix": ["v3s-defineEmits"],
    "body": [
      "const emit = defineEmits([",
      "  \"${1:emit}\"",
      "]);"
    ],
    "description": "create defineEmits code"
  },
  "arrow function": {
    "prefix": ["v3s-anfn"],
    "body": ["(${1:param}) => {", "\t$2", "}"],
    "description": "create arrow function"
  },
  "scope row": {
    "prefix": ["v3s-scr"],
    "body": ["scope.row"]
  }
}
